#!/usr/bin/env bash

build() {
	declare build_files="${*:-versions/**/options}"

	[[ "$BUILDER_IMAGE" ]] || {
		BUILDER_IMAGE="alpine-builder"
		docker build -t "$BUILDER_IMAGE" builder
	}

	for file in $build_files; do
		( # shellcheck source=versions/gliderlabs-3.2/options
		source "$file"
		local version_dir
		version_dir="$(dirname "$file")"
		: "${TAGS:?}" "${BUILD_OPTIONS:?}" "${RELEASE:?}" # Maybe require $ARCHS in the future?

		[[ "$ARCHS" ]] || { # compatability with older configs that were only written for x86_64 architectures
				ARCHS=("x86_64")
		}

		for arch in "${ARCHS[@]}"; do
			# Generate rootfs
			mkdir -p "$version_dir/$arch"
			docker run -e "TRACE=$TRACE" --rm "$BUILDER_IMAGE" -a "$arch" "${BUILD_OPTIONS[@]}" \
				> "$version_dir/$arch/rootfs.tar.xz"
			cp "$version_dir/Dockerfile" "$version_dir/$arch/Dockerfile" # so we can point the builder bots at one directory to build our image. AFAIK docker doesn't follow symlinks

			# Build + tag images
			for tag in "${TAGS[@]}"; do
				# Currently, we just tag the x86_64 images as they were before, and tag the others with their architecture
				# This means that the gliderlabs repos/orgs will not have multi-arch images yet, but they have the options to do so in the future.
				if [[ "$arch" = "x86_64" ]]; then
					docker build -t "$tag" "$version_dir/$arch"
				else
					docker build -t "$tag-$arch" "$version_dir/$arch"
				fi

				if [[ "$CIRCLE_BUILD_NUM" ]]; then
					{
						mkdir -p images \
						&& docker tag -f "$tag" "${tag}-${CIRCLE_BUILD_NUM}" \
						&& docker save "${tag}-${CIRCLE_BUILD_NUM}" \
							| xz -9e > "images/${tag//\//_}-${CIRCLE_BUILD_NUM}.tar.xz" \
						&& docker rmi "${tag}-${CIRCLE_BUILD_NUM}"
					} || true
				fi
			done
		done )

	done
}

commit() {
	[[ "$CIRCLE_BRANCH" == "release" ]] || return 0

	declare options_files="versions/**/options"
	local build_num="${CIRCLE_BUILD_NUM:-nobuild}"
	local current_branch
	current_branch=$(git rev-parse --abbrev-ref HEAD)
	: "${current_branch:?}"

	for file in $options_files; do
		local release version_dir
		release="$(basename "$(dirname "$file")")"
		version_dir="$(dirname "$file")"
		local release_dirs="$version_dir/**/"

		: "${release:?}" "${version_dir:?}"
		git checkout -B "rootfs/$release" "$current_branch"

		# determine if glob has matches
		if compgen -G "$release_dirs" > /dev/null; then
			git add -f -- $release_dirs
		elif [[ -e "$version_dir/rootfs.tar.xz" ]]; then
			git add -f -- "$version_dir/rootfs.tar.xz"
		else
			echo "No files found for release: $release"
			continue
		fi

		git commit -m "release image version $release for build $build_num"
	done

	[[ "$NO_PUSH" ]] || git push -f origin 'refs/heads/rootfs/*'
	git checkout "$current_branch"
}

run_tests() {
	declare build_files="${*:-versions/**/options}"
	declare -a test_files
	for file in $build_files; do
		# shellcheck source=versions/gliderlabs-3.2/options
		source "$file"
		local tag
		tag="${TAGS[0]}" tag="${tag//:/-}" tag="${tag//\//_}"
		test_files+=("test/test_${tag}.bats")
	done
	bats "${test_files[@]}"
}

push() {
	[[ "$CIRCLE_BRANCH" == "release" ]] || return 0
	[[ "$NO_PUSH" ]] && return 0

	declare build_files="${*:-versions/**/options}"
	for file in $build_files; do
		( #shellcheck source=versions/gliderlabs-3.2/options
		source "$file"
		for tag in "${TAGS[@]}"; do
			if docker history "$tag" &> /dev/null; then
				[[ "$PUSH_IMAGE" ]] && docker push "$tag"
			fi
		done
		exit 0 )
	done
}

library() {

	convert() {
		# takes a space-separated list of alpine-linux architectures, and returns a space-separated list of docker architectures
		local i=0
		for arch in "$@"; do
			case "$arch" in # converts Alpine Linux arch strings to Docker arch strings
				x86_64) echo -n "amd64";;
				x86) echo -n "i386";;
				armhf) echo -n "arm32v6";; # arm32v7 is not officially supported by Alpine, but arm32v6 should still work.
				aarch64) echo -n "arm64v8";;
				ppc64le) echo -n "ppc64le";;
				s390x) echo -n "s390x";;
				*) return 1;; # Fail on unknown archs
			esac
			if [[ i -ne $#-1 ]]; then
				echo -n " "
			fi
			let i=$i+1
		done
	}

	echo
	echo "# autogenerated by https://github.com/gliderlabs/docker-alpine/blob/master/build"
	echo
	echo "Maintainers: Glider Labs <team@gliderlabs.com> (@gliderlabs)"
	echo "GitRepo: https://github.com/gliderlabs/docker-alpine.git"

	for file in versions/library-*/options; do
		# shellcheck source=versions/library-3.2/options
		source "$file"
		local refs
		refs="$(git ls-remote --exit-code --heads origin rootfs/library-${RELEASE#v})"
		: "${refs:?}"
		tags="${TAGS[*]}"
		[[ "${ARCHS[*]}" ]] || { # compatability with older configs that were only written for x86_64 architectures
				ARCHS=("x86_64")
		}
		a="$(convert "${ARCHS[@]}")"
		release="$(basename "$(dirname "$file")")"

		echo
		echo "Tags: ${tags// /, }"
		echo "Architectures: ${a// /, }"
		echo "GitFetch: refs/heads/rootfs/$release"
		echo "GitCommit: ${refs:0:40}"

		local i=0
		for arch in $a; do
			# ${ARCHS[i]} is the alpine version string, different from $archs, the docker version string.
			# Our folder structure is based on the alpine version string
			echo "$arch-Directory: versions/library-${RELEASE#v}/${ARCHS[i]}"
			let i=i+1
		done
	done
	echo
}

main() {
	set -eo pipefail; [[ "$TRACE" ]] && set -x
	declare cmd="$1"
	case "$cmd" in
		test)	shift;	run_tests "$@";;
		commit)	shift;	commit "$@";;
		push)	shift;	push "$@";;
		library) shift; library;;
		*)		build "$@";;
	esac
}

main "$@"
